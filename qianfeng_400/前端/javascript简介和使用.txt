'''
1,<button>按钮</button>
2,输入内容
<script type="text/javascript">
document.write("hahaha") # 向页面输出
document.log("冀晓云坚强") # 向控制台输出
alert("sunck is a good man")
</script>

3,数据类型
var a;
a = 10;
console.log(a)
如果a = "string aa a a "也是可以的
可以用typeof(a)查看a的数据类型
也可以用a.toString()转成字符串
特殊数字：
js最大可以表示的是1e308,超过此值的显示为Infinity
不是数字但是属于数据类型的显示为NAN，Infinity-Infinity就等于NAN

字符串相加就是拼接，数字和字符串相加就是把数字转换成字符串再拼接

类型转换
var a = "123"
var b = parseInt(a) # 字符串转数字
如果a = "12+3" ,那么b的就如果就是12

接受用户输入
var a = prompt("请输入数字")
b = parseInt(a)
console.log(b)


三目运算
表达式 ？ 表达式1 ： 表达式2
功能：表达式为真，则整体的值为表达式1,表达式为假，整体为表达式2


定义函数
function 函数名（参数列表）{
    语句
    return 表达式
}

全局变量在函数里可以用，而且可以修改，但是函数内变量不能在全局使用,特殊情况，没有被<var>声明的变量可以在全局使用

变量提升
函数内的变量先调用后定义不会报错，因为变量提升功能会把函数内所有变量的[定义]提升到函数的最开始
function func(){
    console.log(num) # 第一次输出是undefined
    var num = 10
    console.log(num) #  第二次输出是10
}

数组，两种定义方法
1,构造函数：new，传入参数可以是数组长度，也可以是实际元素
var arr1 = new Array(5) # 如果只有一个数字表示“建议的”数组长度，如果有多个表示实际元素，实际传入元素数量可以大于数组定义长度
2,字面量方式，var arr2 = []

时间类型
var d1 = Date()


BOM简介
BOM（Browser Object Model）浏览器对象模型，通过一个全局windows对象调用
console.log(window.document)
console.log(window.frames)
console.log(window.navigator)
console.log(window.screen)
console.log(window.history)


window相关的方法
1,页面加载完成时执行
window.onload = function(){
  /* js语句 */
}
2,页面发生滚动时执行
window.onscroll = function(){
    /* js语句*/
}
3,页面改变大小时执行
window.resize = function(){}
4,延迟一段时间再执行，就执行一次
window.timeout(function(){},2000)
5,间隔一定时间，多次执行
window.setInterval(function(){console.log("sunck is a good man !")},2000)


DOM（document object model）文档对象模型，实际就是window对象中的document
1,DOM分类
core DOM，核心DOM，针对任何结构化文档的标准模型
XML DOM，针对XML文档的标准模型
HTML DOM，针对HTML文档的标准模型
2,DOM节点分类
    1,文档节点，
    2,标签节点，元素节点
    3,（标签）属性节点
    4,文本节点
    5,注视节点
3,js和页面标签进行交互
    1,获取标签（元素）节点
        获取方法一，只能获取光房定义的属性
        a)根据id拿div document.getElementById("idDiv")
        b)根据className拿div document.getElementsByClassName("classDiv")
        c)根据name拿div  document.getElementsByName("inputText")
        d)拿所有div document.getElementsByTagName("div")
        获取标签的官方属性值：元素节点.属性值 console.log(jsInput.name)，还可以修改属性值
        获取方法二：
        元素节点.getAttribute("属性名")，此方法支持获取官方和自定义的两种属性。
         设置元素节点属性值：元素节点.setAttribute("属性名","新值")

        修改标签CS样式
        var w = jsDiv.style.height或者var h = jsDiv.style.width，可以拿出宽高颜色等属性
        修改标签属性
        jsDiv.style.XXX="新值",或者jsDiv.style["height"] = "新值",
        对于外部CSS文件

        节点三大共有属性，nodeName,nodeType,nodeValue
        /* 获取标签节点的共有属性，三大共有属性，可以根据nodeType的值来区分是哪种类型节点 */
        var jsdiv1 = document.getElementById("box1")
        console.log(jsdiv1.nodeName,jsdiv1.nodeType,jsdiv1.nodeValue)
        var jsdiv2 = document.getElementById("box2")
        var jsdiv3 = document.getElementById("box3")
        var jsdiv4 = document.getElementById("put")

        /* 以下都是节点层级关系属性,例如根据父节点找到子节点， */
        /* 获取所有子节点 */
        console.log(jsdiv1.childNodes)
        /* 如果4个P写到4行里去，输出结果是9个，因为在前一个P的</p>和下一个P的<p>之间是有一个text的

        /* 获取第一个节点  */
        console.log(jsdiv1.firstChild)
        /* 获取最后一个节点  */
        console.log(jsdiv1.lastChild)
        /* 获取根节点  */
        console.log(jsdiv1.ownerDocument)
        /* 获取父节点，用于父节点没有id，没有class等唯一标识的时候用jsdiv1.firstchild.parentNode表示父节点  */
        console.log(jsdiv1.firstChild.parentNode);
        /* 获取同一级的前一个节点，注意div3 和div2之间不能有换行和空格  */
        console.log(jsdiv3.previousSibling)
        /* 获取同一级的后一个节点，注意div3 和input之间不能有换行和空格  */
        console.log(jsdiv3.nextSibling)
        /* 获取当前节点的所有属性节点  */
        console.log(jsdiv4.attributes)
        /* 获取当前节点的某一个属性节点  */
        console.log(jsdiv4.attributes[2])

    2,创建标签
     <div id="box1"><p>1</p><p>2</p></div>
     <button onclick="appendInput()">插入input</button>
     <script>
    var boxDiv = document.getElementById("box1")
    /* 创建P节点 */
    var a = document.createElement("p")
    a.innerHTML = "sunck is a good man"
    a.style.backgroundColor = "red"
    console.log(a)
    /* 创建input节点 */
    var i = document.createElement("input")
    i.textContent = "text"
    console.log(i)
    /* 在指定位置插入 */
    boxDiv.insertBefore(i,boxDiv.lastChild)
    /* 插入到box中,默认是插入到最后 */
    function appendInput(){
    boxDiv.appendChild(a)
      }
    /* 创建一个文本节点并添加到页面 */
    var textbox = document.createTextNode("什么")
    boxDiv.appendChild(textbox)
    3,删除标签
    父节点.removeChild(子节点)

    4,复制标签
    var newdiv = jsdiv.cloneNode(true) # 如果没有true，只会复制父节点，
    console.log(newdiv)

    5,插入标签
    var textbox = document.createTextNode("什么")
    boxDiv.appendChild(textbox)

    四种添加事件的方法
    1,直接在div中写函数
    <div id="box1" onclick="alert('sunck is a good man!')"></div>
    2,在标签中调用函数，script中定义函数
    <div id="box2" onclick="func(this)"></div>
    3,在script中添加函数
    div3.onclick = function () {}
    4,在script中调用函数，其中click是事件类型，func1是函数名
    div4.addEventListener("click",func1,false)




'''