整体流程梳理：
1，创建一个数据库，在mysql客户端中：create datebase kaishen
2,创建工程：django-admin startproject project
3,设计表结构
4,创建应用，在第2步的project目录中执行命令python3 manage.py startapp myApp
5,激活应用，在project的settings.py中，INSTALLED_APPS下最后一行写"myApp",
6,配置数据库，在project的settings.py中，DATABASES下配置数据库的host，port，user，passwd等信息
			  在project的__init__.py中，引入pymysql,import pymysql  pymysql.install_as_MySQLdb()
7,在myApp的models.py定义模型类，两个class Grades和class Students
8,生成迁移文件，python3 manage.py makemigrations
9,执行迁移,python3 manage.py migrate
10,启动服务器python3 manage.py runserver
11,配置站点
12,创建模板文件，该文件下再创建应用目录，在project下settings.py文件中配置模板路径，即templates
13,定义视图，在myApp的views.py下写一个函数
14,在project下修改urls.py
15,在项目myApp下创建urls.py


创建项目：
	1,在合适位置创建目录
	2,进入目录
	3,django-admin startproject "projectName"
	4,目录层级说明：
		manager.py：一个命令行工具 ，可以使我们用多种方式对Django项目进行交互
		project目录：
			__init__.py:告诉Python解释器这是一个python包
			setting.py:项目配置文件
			urls.py:项目的URL声明
			wsgi.py:项目与WSGI兼容的web服务器入口


基本操作：
	设计表结构：
		班级表结构：
			表名，grades
			字段，
				班级名称：gname
				成立时间：gdate
				女生总数：ggirlnum
				男生总数：gboynum
				是否删除：isDelete
		学生表:
			表名：students
			字段：
				学生姓名：sname
				学生性别：sgender
				学生年龄：sage
				学生简介：scontend
				所属班级：sgrade
				是否删除：isDelete
	配置数据库，
		1,Django默认使用sqllite
		2,配置数据库方法：在settings.py文件中，通过DATABASES选项进行数据库配置
		3,配置MySQL，
			python3.x安装的是PyMySQL
			在__init__.py文件中写入，import pymysql pymysql.install_as_MySQLdb()
			在settings.py中配置，DATABASES = {
											    'default': {
											        'ENGINE': 'django.db.backends.mysql',
											        'NAME': "sunck",  # 直接写数据库名也可以
											        'USER': "user",  # 直接写数据库名也可以
											        'PASSWORD': "password",  # 直接写数据库名也可以
											        'HOST': "localhost",  # 直接写数据库名也可以
											        'PORT': 3306,  # 直接写数据库名也可以
											    }
		4,创建应用，
			1,一个项目中可以包含多个应用，每一个应用进行一种业务处理
			2,进入到firstSite中的project目录
			3,执行 python3 manage.py startapp myApp
			4,myApp目录说明：
				1,admin.py:站点配置
				2,models.py：模型
				3,views.py：视图
		5,激活应用，
			1,settings.py文件中，将新建的应用myApp加入到INSTALLED_APPS中，最后一行添加语句，'myApp',
		6,定义模型，
			1,有一个数据表，就对应一个模型
			2,在models.py中定义模型
				1,在myApp的models.py中引入，from django.db import models
				2,引入的作用，模型类要继承models.Models类
				3,在models.py文件中定义模型
				4,说明：不需要定义主键，自动添加，自动增1
		7,在数据库中生成数据表
			1,生成迁移文件，在firestproject的project执行，python3 manage.py makemigrations，在migrations中生成了迁移文件此时数据库中还没有生成表
			2,执行迁移，python3 manage.py migrate
		8,测试数据操作，
			1,执行python3 manage.py shell
			2，引入包，
				from myApp.models import Grades,Students
				from django.utils import timezone
				from datetime import * 
			3,查询所有数据,格式:类名.objects.all()，实例Grades.objects.all()
			4,添加数据，本质就是创建一个模型类的对象实例
				1,grade1 = Grades()
				2,grade1.gname = "python4"
				3,grade1.gdate = datetime(year=2017,month=7,day=17)
				4,grade1.ggirlnum = 3
				5,grade1.gboynum = 70
				6,grade1.save()
				7,重新__str__(self)函数：
					    def __str__(self):
       						 return "%s-%d-%d" % (self.gname,self.ggirlnum,self.gboynum)
				8,再一次查询所有数据，Grades.objects.all()
				9,在插入一条
				grade2 = Grades()
				grade2.gname = "python5"
				grade2.gdate = datetime(year=2017,month=7,day=31)
				grade2.ggirlnum = 1
				grade2.gboynum = 50
				grade2.save()
			5,查询指定对象，
				1,格式类名.objects.get(pk=2),实例：g2 = Grades.objects.get(pk=2)
			6,修改一条数据中的某个值，模型对象.属性 = 新值，实例:grade2.gboynum = 60,然后保存grade2.save()
			7,删除一条数据，模型对象.delete(),实例：grade2.delete()，直接从数据库中物理删除。
			8,关联对象,把学生表中学生项和班级表中班级项关联起来
			    1,获取班级，
			        grade1 = Grades.objects.get(pk=1)
			    2,添加学生数据，
			        stu = Students()
			        stu.sname = "zhangsan"
			        stu.sgender = False
			        stu.sage = 20
			        stu.sconted = "i am zhangsan"
			        stu.sgrade = grade1
                3,跨表查询，获取python04班的所有学生
                    格式：对象名.关联的类名小写_set.all()，其中set方法是自定义函数
                    grades1.students_set.all()
                4,添加学生数据并关联班级python04，不用save()方法
                    stu2 = grade1.students_set.create(sname="wangwu",sage = 45,sconted="wo shi wangwu")
        9,启动服务器
            1,格式：python3 manager.py runserver ip:port
            2,说明：ip默认是localhost，可以不写，port默认是8000，可以不写，简化成：python3 manager.py runserver，只用于开发测试，不能用于生产环境
        10,Admin站点管理
            1,概述
                1,内容发布:作用是增删改数据库的数据
                2,公告发布：
            2,配置Admin应用，在project中的settings.py中，INSTALLED_APPS标签，
            默认已经配置，语句：'django.contrib.admin',
            3,创建管理员用户，
                1,命令：python3 manage.py createsuperuser
                实例：djangouser/147258Jxy
                2,访问url，ip:8000/admin
                3,管理页面显示语言管理，在settings.py，
                    LANGUAGE = ‘zh-Hans’
                    TIME_ZONE = 'Asia/Shanghai'
                4,在django管理站点中添加数据库管理页面
                    修改myApp文件中得到admin.py
                    from .models import Grades, Students
                    admin.site.register(Grades)
                    admin.site.register(Students)
                5,自定义管理页面
                    1,属性说明
                        1,列表页属性
                            1,list_display,添加显示字段，就是加个表头字段，可以定制字段多少
                            list_display = ["pk", "gname", "gdate", "ggirlnum", "gboynum", "isDelete"]

                            2,list_filter,添加一个过滤器，用于过滤字段，参数是过滤条件
                            list_filter = ["gname"]

                            3,search_fields,添加一个搜索框，参数用于指定搜索字段
                            search_fields = ["gname"]

                            4,list_per_page，每页显示的条目数量，默认是5,大于5才会显示分页
                            list_per_page = 5
                        2,添加页、修改页属性
                            1,fields，添加和修改时，属性显示的顺序
                                实例：fields = ["ggirlnum", "gboynum", "gname", "gdate", "isDelete"
                            2,fieldsets，添加和修改时，把属性分成几个组，
                                实例：fieldsets = [
                                                    ("num", {"fields": ["ggirlnum", "gboynum"]}),
                                                    ("base", {"fields": ["gname", "gdate", "isDelete"]})
                                                ]
                    2,关联对象
                        1,需求：创建一个班级时，同时能直接添加几个学生
                        2,步骤：
                            1,定义一个类
                            class StudentsInfo(admin.TabularInline): # 另一种形式admin.StackedInline
                            model = Students
                            extra = 2
                            2,然后在class GradeAdmin(admin.ModelAdmin):中
                                添加语句inlines = [StudentsInfo]
                    3,Booleanz值显示问题，
                        1,需求，把男女的True和False显示为男女
                        def gender(self):
                            if self.sgender:
                                return "男"
                            else:
                                return "女"
                         然后给list_display原来的sgender传入gender函数
                         list_display = ["pk", "sname", gender, "sage", "scontend", "sgrade", "isDelete"]
                        2,修改表头列的显示名
                        # 设置页面表头列的名称
                        gender.short_description = "性别"
                    4,执行动作按钮在页面位置
                        actions_on_bottom = True
                        actions_on_top = False
                6,使用装饰器完成注册
                     不用admin.site.register(Students, StudentsAdmin)
                     用装饰器


视图的基本使用
    1,概述：在django中，视图对web请求进行回应
    2,本质，就是一个python函数，在myApp的views.py文件中定义
        from django.http import HttpResponse
        # 定义了一个视图，也就是一个html页面
        def index(request):
            return HttpResponse("sunck is a good man !")
    3,上一步只是定义了一个视图，还需要在url控制器中配置url，url控制器就是project文件的urls.py文件
    	from django.contrib import admin
		from django.urls import path
		from django.conf.urls import url, include
		urlpatterns = [
		    path('admin/', admin.site.urls),
		    url(r'^', include("myApp.urls")),
			]
        
        myApp的urls.py定义：
        from django.conf.urls import url
        from . import views
        urlpatterns = [
            url(r'^$', views.index),
        ]
        说明：先到project的urls.py,再到myApp的urls.py，再到myApp的views.py
    4,模板的使用
    	1,概述，本质是html页面，可以根据视图中传递过来的数据来填充
    	2,创建模板目录，创建templates目录，在该目录下创建对应项目的模板目录，project/templates/myApp
        3,配置路径










